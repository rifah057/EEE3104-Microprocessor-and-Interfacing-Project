$date
	Mon Mar 29 19:48:48 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module MOV_A_Address_tb $end
$var wire 4 ! ALU_to_A [3:0] $end
$var wire 4 " ALU_to_B [3:0] $end
$var wire 4 # A_to_ALU [3:0] $end
$var wire 4 $ A_to_OUT [3:0] $end
$var wire 4 % A_to_RAM [3:0] $end
$var wire 4 & A_to_TMP [3:0] $end
$var wire 4 ' B_to_A [3:0] $end
$var wire 4 ( B_to_ALU [3:0] $end
$var wire 4 ) B_to_RAM [3:0] $end
$var wire 1 * Carry_from_A $end
$var wire 1 + Carry_from_ALU $end
$var wire 1 , Carry_from_B $end
$var wire 1 - Carry_to_Reg $end
$var wire 1 . Cea $end
$var wire 1 / Cei $end
$var wire 1 0 Cetmp $end
$var wire 1 1 Cp $end
$var wire 1 2 EPC $end
$var wire 1 3 ERam $end
$var wire 1 4 EaCarry $end
$var wire 1 5 EaOut $end
$var wire 1 6 EaRAM $end
$var wire 1 7 Eatmp $end
$var wire 1 8 Eba $end
$var wire 1 9 Ecall $end
$var wire 1 : Ecf $end
$var wire 1 ; Ei $end
$var wire 1 < Ejmp $end
$var wire 1 = Ep $end
$var wire 1 > Epop $end
$var wire 1 ? Epush $end
$var wire 1 @ Ercl $end
$var wire 1 A Etmpb $end
$var wire 1 B Eu $end
$var wire 1 C HLT $end
$var wire 4 D IR_operand [3:0] $end
$var wire 4 E IR_to_Control [3:0] $end
$var wire 1 F LA $end
$var wire 1 G LPC $end
$var wire 1 H LRam $end
$var wire 1 I LaALU $end
$var wire 1 J LaOUT $end
$var wire 1 K LaRam $end
$var wire 1 L Lab $end
$var wire 1 M LbALU $end
$var wire 1 N Lbtmp $end
$var wire 1 O Lcarry $end
$var wire 1 P LcarryA $end
$var wire 1 Q Lcf $end
$var wire 1 R Li $end
$var wire 1 S Lmi $end
$var wire 1 T Lmp $end
$var wire 1 U Lo $end
$var wire 1 V Lpop $end
$var wire 1 W Lpush $end
$var wire 1 X LtmpRAM $end
$var wire 1 Y Ltmpa $end
$var wire 1 Z Lzf $end
$var wire 4 [ MAR_to_RAM [3:0] $end
$var wire 4 \ OUT_to_disp [3:0] $end
$var wire 4 ] PC_to_MAR [3:0] $end
$var wire 4 ^ PC_to_RAM [3:0] $end
$var wire 4 _ RAM_to_A [3:0] $end
$var wire 4 ` RAM_to_B [3:0] $end
$var wire 8 a RAM_to_IR [7:0] $end
$var wire 4 b RAM_to_PC [3:0] $end
$var wire 4 c RAM_to_TMP [3:0] $end
$var wire 1 d Su $end
$var wire 4 e TMP_to_ALU [3:0] $end
$var wire 4 f TMP_to_B [3:0] $end
$var wire 1 g Z_from_ALU $end
$var wire 1 h popstack $end
$var wire 1 i pushstack $end
$var reg 1 j clk $end
$var reg 4 k input_address [3:0] $end
$var reg 1 l input_mode $end
$var reg 8 m input_program [7:0] $end
$var reg 1 n reset $end
$scope module example_tbCS $end
$var wire 4 o IR_to_Control [3:0] $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 1 r Cea $end
$var reg 1 s Cei $end
$var reg 1 t Cetmp $end
$var reg 1 u Cp $end
$var reg 1 v EPC $end
$var reg 1 w ERam $end
$var reg 1 x EaCarry $end
$var reg 1 y EaOut $end
$var reg 1 z EaRAM $end
$var reg 1 { Eatmp $end
$var reg 1 | Eba $end
$var reg 1 } Ecall $end
$var reg 1 ~ Ecf $end
$var reg 1 !" Ei $end
$var reg 1 "" Ejmp $end
$var reg 1 #" Ep $end
$var reg 1 $" Epop $end
$var reg 1 %" Epush $end
$var reg 1 &" Ercl $end
$var reg 1 '" Etmpb $end
$var reg 1 (" Eu $end
$var reg 1 )" HLT $end
$var reg 1 *" LA $end
$var reg 1 +" LPC $end
$var reg 1 ," LRam $end
$var reg 1 -" LaALU $end
$var reg 1 ." LaOUT $end
$var reg 1 /" LaRam $end
$var reg 1 0" Lab $end
$var reg 1 1" LbALU $end
$var reg 1 2" Lbtmp $end
$var reg 1 3" Lcarry $end
$var reg 1 4" LcarryA $end
$var reg 1 5" Lcf $end
$var reg 1 6" Li $end
$var reg 1 7" Lmi $end
$var reg 1 8" Lmp $end
$var reg 1 9" Lo $end
$var reg 1 :" Lpop $end
$var reg 1 ;" Lpush $end
$var reg 1 <" LtmpRAM $end
$var reg 1 =" Ltmpa $end
$var reg 1 >" Lzf $end
$var reg 1 ?" Su $end
$var reg 6 @" counter_state [5:0] $end
$var reg 1 A" popstack $end
$var reg 1 B" pushstack $end
$upscope $end
$scope module example_tbPC $end
$var wire 1 1 Cp $end
$var wire 1 3 ERam $end
$var wire 1 9 Ecall $end
$var wire 1 < Ejmp $end
$var wire 1 = Ep $end
$var wire 1 C HLT $end
$var wire 4 C" IR_operand [3:0] $end
$var wire 1 H LRam $end
$var wire 4 D" PC_to_MAR [3:0] $end
$var wire 4 E" PC_to_RAM [3:0] $end
$var wire 4 F" RAM_to_PC [3:0] $end
$var wire 1 g Z_from_ALU $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 4 G" count [3:0] $end
$var reg 4 H" count_buffer [3:0] $end
$var reg 1 I" first $end
$var reg 4 J" ret_address [3:0] $end
$upscope $end
$scope module example_tbMAR $end
$var wire 4 K" IR_to_MAR [3:0] $end
$var wire 1 S Lmi $end
$var wire 1 T Lmp $end
$var wire 4 L" MAR_to_RAM [3:0] $end
$var wire 4 M" PC_to_MAR [3:0] $end
$var wire 1 p clk $end
$var reg 4 N" address [3:0] $end
$upscope $end
$scope module example_tbRAMRAM $end
$var wire 4 O" A_to_RAM [3:0] $end
$var wire 4 P" B_to_RAM [3:0] $end
$var wire 1 . Cea $end
$var wire 1 / Cei $end
$var wire 1 0 Cetmp $end
$var wire 1 2 EPC $end
$var wire 1 > Epop $end
$var wire 1 F LA $end
$var wire 1 G LPC $end
$var wire 1 W Lpush $end
$var wire 4 Q" MAR_to_RAM [3:0] $end
$var wire 4 R" PC_to_RAM [3:0] $end
$var wire 4 S" RAM_to_A [3:0] $end
$var wire 4 T" RAM_to_B [3:0] $end
$var wire 8 U" RAM_to_IR [7:0] $end
$var wire 4 V" RAM_to_PC [3:0] $end
$var wire 4 W" RAM_to_TMP [3:0] $end
$var wire 1 p clk $end
$var wire 4 X" input_address [3:0] $end
$var wire 1 Y" input_mode $end
$var wire 8 Z" input_program [7:0] $end
$var wire 1 h popstack $end
$var wire 1 i pushstack $end
$var reg 4 [" StackPointer [3:0] $end
$var integer 32 \" address [31:0] $end
$var reg 4 ]" dataA [3:0] $end
$var reg 4 ^" dataB [3:0] $end
$var reg 8 _" dataIR [7:0] $end
$var reg 4 `" dataTMP [3:0] $end
$var reg 4 a" ret_address [3:0] $end
$upscope $end
$scope module example_tbIR $end
$var wire 1 ; Ei $end
$var wire 4 b" IR_operand [3:0] $end
$var wire 4 c" IR_to_Control [3:0] $end
$var wire 1 R Li $end
$var wire 8 d" RAM_to_IR [7:0] $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 4 e" address_field [3:0] $end
$var reg 4 f" opcode [3:0] $end
$var reg 4 g" operand [3:0] $end
$upscope $end
$scope module example_tbAR $end
$var wire 4 h" ALU_to_A [3:0] $end
$var wire 4 i" A_to_ALU [3:0] $end
$var wire 4 j" A_to_OUT [3:0] $end
$var wire 4 k" A_to_RAM [3:0] $end
$var wire 4 l" A_to_TMP [3:0] $end
$var wire 4 m" B_to_A [3:0] $end
$var wire 1 * Carry_from_A $end
$var wire 1 4 EaCarry $end
$var wire 1 5 EaOut $end
$var wire 1 6 EaRAM $end
$var wire 1 7 Eatmp $end
$var wire 1 I LaALU $end
$var wire 1 K LaRam $end
$var wire 1 L Lab $end
$var wire 4 n" RAM_to_A [3:0] $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 1 o" carry $end
$var reg 4 p" dataA [3:0] $end
$var reg 4 q" dataOut [3:0] $end
$var reg 4 r" dataRAM [3:0] $end
$var reg 4 s" dataTMP [3:0] $end
$upscope $end
$scope module example_tbTMPR $end
$var wire 4 t" A_to_TMP [3:0] $end
$var wire 1 A Etmpb $end
$var wire 1 X LtmpRAM $end
$var wire 1 Y Ltmpa $end
$var wire 4 u" RAM_to_TMP [3:0] $end
$var wire 4 v" TMP_to_ALU [3:0] $end
$var wire 4 w" TMP_to_B [3:0] $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 4 x" dataOut [3:0] $end
$var reg 4 y" dataTMP [3:0] $end
$upscope $end
$scope module example_tbBR $end
$var wire 4 z" ALU_to_B [3:0] $end
$var wire 4 {" B_to_A [3:0] $end
$var wire 4 |" B_to_ALU [3:0] $end
$var wire 4 }" B_to_RAM [3:0] $end
$var wire 1 , Carry_from_B $end
$var wire 1 - Carry_to_Reg $end
$var wire 1 8 Eba $end
$var wire 1 ? Epush $end
$var wire 1 @ Ercl $end
$var wire 1 M LbALU $end
$var wire 1 N Lbtmp $end
$var wire 1 O Lcarry $end
$var wire 1 V Lpop $end
$var wire 4 ~" RAM_to_B [3:0] $end
$var wire 4 !# TMP_to_B [3:0] $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 1 "# CB $end
$var reg 1 ## Carry $end
$var reg 4 $# dataB [3:0] $end
$var reg 4 %# dataBtoA [3:0] $end
$var reg 4 &# dataBtoRAM [3:0] $end
$upscope $end
$scope module example_tbALU $end
$var wire 4 '# ALU_to_A [3:0] $end
$var wire 4 (# ALU_to_B [3:0] $end
$var wire 4 )# A_to_ALU [3:0] $end
$var wire 4 *# B_to_ALU [3:0] $end
$var wire 1 + Carry_from_ALU $end
$var wire 1 B Eu $end
$var wire 4 +# IR_to_Control [3:0] $end
$var wire 4 ,# TMP_to_ALU [3:0] $end
$var wire 1 g Z_from_ALU $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 1 -# carry_flag $end
$var reg 1 .# cy $end
$var reg 4 /# result [3:0] $end
$var reg 4 0# resultOut [3:0] $end
$var reg 1 1# zero_flag $end
$var reg 1 2# zz $end
$scope task add_sub $end
$var reg 4 3# A [3:0] $end
$var reg 4 4# B [3:0] $end
$var reg 4 5# BB [3:0] $end
$var reg 1 6# Carryin $end
$var reg 1 7# Carryout $end
$var reg 4 8# Sum [3:0] $end
$upscope $end
$upscope $end
$scope module example_tbFlag $end
$var wire 1 * Carry_from_A $end
$var wire 1 + Carry_from_ALU $end
$var wire 1 , Carry_from_B $end
$var wire 1 - Carry_to_Reg $end
$var wire 1 : Ecf $end
$var wire 1 @ Ercl $end
$var wire 1 P LcarryA $end
$var wire 1 Q Lcf $end
$var wire 1 Z Lzf $end
$var wire 1 g Z_from_ALU $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 1 9# carry $end
$var reg 1 :# cy $end
$var reg 1 ;# zero $end
$var reg 1 <# zz $end
$upscope $end
$scope module example_tbOUTR $end
$var wire 4 =# A_to_OUT [3:0] $end
$var wire 1 J LaOUT $end
$var wire 4 ># OUT_to_disp [3:0] $end
$var wire 1 p clk $end
$var wire 1 q reset $end
$var reg 4 ?# dataDisp [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ?#
bx >#
bx =#
x<#
x;#
x:#
x9#
bx 8#
x7#
x6#
bx 5#
bx 4#
bx 3#
x2#
x1#
bx 0#
bx /#
0.#
0-#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
x##
x"#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bz u"
bx t"
bx s"
bx r"
bx q"
bx p"
xo"
bz n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bz d"
bx c"
bx b"
bx a"
bz `"
bz _"
bx ^"
bz ]"
b10000 \"
b1111 ["
bx Z"
xY"
bx X"
bz W"
bx V"
bz U"
bx T"
bz S"
bx R"
b0 Q"
bx P"
bx O"
b0 N"
bz M"
b0 L"
bx K"
bx J"
0I"
bz H"
b0 G"
bx F"
bx E"
bz D"
bx C"
xB"
xA"
bx @"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
1q
1p
bx o
1n
bx m
xl
bx k
1j
xi
xh
xg
bx f
bx e
xd
bz c
bx b
bz a
bx `
bz _
bx ^
bz ]
bx \
b0 [
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
bx E
bx D
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
0+
x*
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#1
bz J"
bz ^
bz E"
bz R"
bz e"
bz D
bz C"
bz K"
bz b"
bz g"
bz f"
bz E
bz o
bz c"
bz +#
bz q"
bz $
bz j"
bz =#
bz r"
bz %
bz O"
bz k"
bz s"
bz &
bz l"
bz t"
bz p"
bz #
bz i"
bz )#
bz x"
bz f
bz w"
bz !#
bz y"
bz e
bz v"
bz ,#
bz &#
bz )
bz P"
bz }"
bz %#
bz '
bz m"
bz {"
b0 $#
b0 (
b0 |"
b0 *#
z-#
z1#
bz 0#
bz "
bz z"
bz (#
bz !
bz h"
bz '#
bz ?#
bz \
bz >#
0)"
0C
b1 @"
0n
0q
#2
1l
1Y"
1n
1q
#3
b1 m
b1 Z"
b1001 k
b1001 X"
#4
b1000 m
b1000 Z"
b1010 k
b1010 X"
#5
b1111001 m
b1111001 Z"
b0 k
b0 X"
#6
0l
0Y"
#10
bz N"
bz [
bz L"
bz Q"
b10 @"
0}
09
0v
02
0+"
0G
0w
03
0,"
0H
0A"
0h
0B"
0i
0$"
0>
0:"
0V
0%"
0?
0;"
0W
0""
0<
04"
0P
0x
04
05"
0Q
0>"
0Z
0&"
0@
03"
0O
0~
0:
0y
05
0."
0J
01"
0M
0t
00
0<"
0X
0*"
0F
0z
06
0-"
0I
0'"
0A
0="
0Y
09"
0U
0|
08
02"
0N
0("
0B
0?"
0d
0{
07
00"
0L
0/"
0K
0!"
0;
06"
0R
0r
0.
0s
0/
07"
0S
18"
1T
1#"
1=
0u
01
0j
0p
#20
b0 N"
b0 [
b0 L"
b0 Q"
b0 H"
b0 ]
b0 D"
b0 M"
1j
1p
#30
b100 @"
08"
0T
0#"
0=
1u
11
0j
0p
#40
b1 G"
1j
1p
#50
b1000 @"
16"
1R
1s
1/
0u
01
0j
0p
#60
b1001 g"
b111 f"
b111 E
b111 o
b111 c"
b111 +#
b1111001 _"
b1111001 a
b1111001 U"
b1111001 d"
1j
1p
#70
bz N"
bz [
bz L"
bz Q"
b10000 @"
1!"
1;
06"
0R
0s
0/
17"
1S
0j
0p
#80
b1001 N"
b1001 [
b1001 L"
b1001 Q"
bz _"
bz a
bz U"
bz d"
b1001 e"
b1001 D
b1001 C"
b1001 K"
b1001 b"
1j
1p
#90
b100000 @"
1/"
1K
0!"
0;
1r
1.
07"
0S
0j
0p
#100
b1 p"
b1 #
b1 i"
b1 )#
b1 ]"
b1 _
b1 S"
b1 n"
1j
1p
#110
b1 @"
0/"
0K
0r
0.
0j
0p
#120
bz ]"
bz _
bz S"
bz n"
1j
1p
#130
b0 N"
b0 [
b0 L"
b0 Q"
b10 @"
18"
1T
1#"
1=
0j
0p
